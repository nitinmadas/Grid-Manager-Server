// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Drivers
model Driver {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  // Driver ID - usually last name
  driverId          String   @unique
  // 3 Letter driver code
  code              String
  // Price
  price             Int      @default(0)
  // Points scored in the season
  points            Int      @default(0)
  // Points History
  pointsHistory     Json[]
  // First Name
  givenName         String
  // Last Name
  familyName        String
  // Image of the driver
  image             String
  // Nationality of driver
  countryCode       String?
  // Driver Number (Car number)
  permanentNumber   Int
  // Team for which the driver drives
  constructor_name  String
  // Constructor color
  constructor_color String
  // Percentage of teams in which the driver is present
  chosenPercentage  Float    @default(0)
  // Created & updated times
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model DriverInTeam {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  // Driver ID - usually last name
  driverId          String
  // 3 Letter driver code
  code              String
  // Price
  price             Int      @default(0)
  // Points scored for the Team
  pointsForTeam     Int      @default(0)
  // Points History
  teamPointsHistory Json[]
  // First Name
  givenName         String
  // Last Name
  familyName        String
  // Image of the driver
  image             String
  // Nationality of driver
  countryCode       String?
  // Driver Number (Car number)
  permanentNumber   Int
  // Team for which the driver drives
  constructor_name  String
  // Constructor color
  constructor_color String
  // Team
  Team              Team?    @relation(fields: [teamId], references: [id])
  teamId            String?  @db.ObjectId
  // Created & updated times
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Constructors 
model Constructor {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  // Constructor number (required for DND)
  constructorNumber Int
  // Constructor Id
  constructorId     String   @unique
  // Constructor name
  name              String
  // Price
  price             Int      @default(0)
  // Points scored in the season
  points            Int      @default(0)
  // Points History
  pointsHistory     Json[]
  // Images
  logo              String?
  carImage          String?
  // Percentage of teams in which the constructor is present
  chosenPercentage  Float    @default(0)
  // Created & updated times
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ConstructorInTeam {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  // Constructor number (required for DND)
  constructorNumber Int
  // Constructor Id
  constructorId     String
  // Constructor name
  name              String
  // Price
  price             Int      @default(0)
  // Points scored for the Team
  pointsForTeam     Int      @default(0)
  // Points History
  teamPointsHistory Json[]
  // Images
  logo              String?
  carImage          String?
  // Team
  Team              Team?    @relation(fields: [teamId], references: [id])
  teamId            String?  @db.ObjectId
  // Percentage of teams in which the constructor is present
  chosenPercentage  Float    @default(0)
  // Created & updated times
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Schema for user
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // UID received from firebase
  firebaseUID String   @unique
  // Username for the user - must be unique.
  username    String?  @unique
  // Name of the user
  name        String?
  // User's Email address
  email       String   @unique
  // User's Display picture link
  photoURL    String?  @default("")
  teams       Team[]
  // Created & updated times
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  League      League[]
}

// Fantasy team that is created by the user - contains 5 drivers & 2 constructors
model Team {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  // User who has created the team (player)
  User             User?               @relation(fields: [userId], references: [id])
  // ID of user who has created the team (player)
  userId           String?             @db.ObjectId
  name             String?
  // Selected Drivers
  teamDrivers      DriverInTeam[]
  // Selected Constructors 
  teamConstructors ConstructorInTeam[]
  // Selected Driver IDs for filtering
  driverIds        String[]            @default([])
  // Selected Driver IDs for filtering
  constructorIds   String[]            @default([])
  // The price for the team
  price            Int                 @default(0)
  // Score
  score            Int                 @default(0)
  // Free changes
  freeChangeLimit  Int                 @default(-1)
  // Created & updated times
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  // League in which team is present.
  League           League?             @relation(fields: [leagueId], references: [id])
  leagueId         String?             @db.ObjectId
}

// League in which teams are added
model League {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  // User who has created the team (player)
  User          User?    @relation(fields: [userId], references: [id])
  // ID of user who has created the team (player)
  userId        String?  @db.ObjectId
  // UID for the League
  leagueId      String   @unique
  private       Boolean  @default(false)
  name          String?
  numberOfTeams Int      @default(0)
  teams         Team[]
  // Created & updated times
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Keeps track of last race for which points were added
model LastRace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  season    Int
  round     Int
  raceName  String
  // Created & updated times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Keeps track of last qualifying for which points were added
model LastQualifying {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  season    Int
  round     Int
  raceName  String
  // Created & updated times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Keeps track of last sprint for which points were added
model LastSprint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  season    Int
  round     Int
  raceName  String
  // Created & updated times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
