// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Schema for user
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // UID received from firebase
  firebaseUID String   @unique
  // Username for the user - must be unique.
  username    String?  @unique
  // Name of the user
  name        String?
  // User's Email address
  email       String   @unique
  // User's Display picture link
  photoURL    String?  @default("")
  teams       Team[]
  // Created & updated times
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  League      League[]
}

// Fantasy team that is created by the user - contains 3 drivers & 2 constructors
model Team {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  // User who has created the team (player)
  User             User?    @relation(fields: [userId], references: [id])
  // ID of user who has created the team (player)
  userId           String?  @db.ObjectId
  name             String?
  // Selected Drivers
  teamDrivers      Json[]
  // Selected Constructors 
  teamConstructors Json[]
  // Selected Driver IDs for filtering
  driverIds        String[] @default([])
  // Selected Driver IDs for filtering
  constructorIds   String[] @default([])
  // The price for the team
  price            Int      @default(0)
  // Score
  score            Int      @default(0)
  // Created & updated times
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  League           League?  @relation(fields: [leagueId], references: [id])
  leagueId         String?  @db.ObjectId
}

model League {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  // User who has created the team (player)
  User     User?   @relation(fields: [userId], references: [id])
  // ID of user who has created the team (player)
  userId   String? @db.ObjectId
  // UID for the League
  leagueId String  @unique
  private  Boolean @default(false)
  name     String?
  teams    Team[]
}

// Keeps track of last race for which points were added
model LastRace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  season    Int
  round     Int
  raceName  String
  // Created & updated times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Keeps track of last qualifying for which points were added
model LastQualifying {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  season    Int
  round     Int
  raceName  String
  // Created & updated times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Keeps track of last sprint for which points were added
model LastSprint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  season    Int
  round     Int
  raceName  String
  // Created & updated times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
